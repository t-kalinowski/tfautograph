% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tf.R
\name{tf_case}
\alias{tf_case}
\title{tf.case}
\usage{
tf_case(..., pred_fn_pairs = list(...), default = NULL,
  exclusive = FALSE, name = "case")
}
\arguments{
\item{..., pred_fn_pairs}{a list `pred_fn_pairs` supplied with the `~` like
so: `pred ~ fn_body`}

\item{default}{a function, optionally specifed with the `~`, (or something
coercable to a function via `as.function()`)}

\item{exclusive}{bool, whether to evaluate all `preds` and ensure only one is
true. If `FALSE` (the default), then the `preds` are evaluated in the order
supplied until the first `TRUE` value is encountered (effectively, acting
as an `if()... else if() ... else if() ...` chain)}

\item{name}{a string, passed on to `tf.case()`}
}
\value{
The result from `tf$case()`
}
\description{
tf.case
}
\examples{
fizz_buzz_one <- function(x) {
  tf_case(
    x \%\% 15 == 0 ~ "FizzBuzz",
    x \%\%  5 == 0 ~ "Buzz",
    x \%\%  3 == 0 ~ "Fizz",
    default = ~ tf$as_string(x, precision = 0L)
  )
}

fn <- tf_function(autograph(function(n) {
  for(e in tf$range(n))
    tf$print(fizz_buzz_one(e))
}))

x <- tf$constant(16)
fn(x)
}
