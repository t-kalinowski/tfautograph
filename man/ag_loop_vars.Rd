% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/opts.R
\name{ag_loop_vars}
\alias{ag_loop_vars}
\title{Specify loop variables}
\usage{
ag_loop_vars(..., list = character(), include = character(),
  exclude = character(), undefs = exclude)
}
\arguments{
\item{...}{Variables as bare symbol names}

\item{list}{optionally, the variable names as a character vector (use this as
an escape hatch from the \code{...} lazy evaluation semantics).}

\item{undefs}{character vector of symbols}
}
\value{
\code{NULL}, invisibly.
}
\description{
This can be used to manually specify which variables are to be included
explicitly as \code{loop_vars} when autographing an expression into a
\code{tf.while_loop()} call, or the \code{loop_vars} equivalent when building a
\code{dataset.reduce()}.
}
\details{
Use of this is usually not required as the loop variables are automatically
inferred. Inference is done by statically looking through the loop body and
finding the symbols that are the targets of the common assignment operators
from base R (\code{<-}, \code{->}, \code{=}), from package:zeallot (\code{\%<-\%} and \code{\%->\%}) and
package:magrittr (\code{\%<>\%}).

In certain circumstances, this approach may capture variables that are
intended to be local variables only. In those circumstances it is also
possible to specify them preceded with a \code{-}.

Note, the specified loop vars are expected to exist before the autographed
expression, and a warning is issued otherwise (usually immediately preceding
an error thrown when attempting to actually autograph the expression)

Only bare symbol names can be supplied as loop vars. In the future, support
may be expanded to allow for nested complex composites (e.g., specifying
variables that are nested within a more complex structure--passing
\code{ag_loop_vars(foo$bar$baz)} is currently not supported.)
}
\note{
The semantics of this function are inspired by base::rm()
}
\examples{
\dontrun{
i <- tf$constant(0L)

autograph({
  ag_loop_vars(x, i)
  while(x > 0) {
    if(x \%\%2 == 0)
      i <- i + 1L
    x <- x - 1
  }
})
}
}
